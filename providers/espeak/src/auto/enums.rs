// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../../spiel/build/libspielprovider
// DO NOT EDIT

use glib::{translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "SpielProviderEventType")]
pub enum EventType {
    #[doc(alias = "SPIEL_PROVIDER_EVENT_TYPE_NONE")]
    None,
    #[doc(alias = "SPIEL_PROVIDER_EVENT_TYPE_WORD")]
    Word,
    #[doc(alias = "SPIEL_PROVIDER_EVENT_TYPE_SENTENCE")]
    Sentence,
    #[doc(alias = "SPIEL_PROVIDER_EVENT_TYPE_RANGE")]
    Range,
    #[doc(alias = "SPIEL_PROVIDER_EVENT_TYPE_MARK")]
    Mark,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for EventType {
    type GlibType = ffi::SpielProviderEventType;

    #[inline]
fn into_glib(self) -> ffi::SpielProviderEventType {
match self {
            Self::None => ffi::SPIEL_PROVIDER_EVENT_TYPE_NONE,
            Self::Word => ffi::SPIEL_PROVIDER_EVENT_TYPE_WORD,
            Self::Sentence => ffi::SPIEL_PROVIDER_EVENT_TYPE_SENTENCE,
            Self::Range => ffi::SPIEL_PROVIDER_EVENT_TYPE_RANGE,
            Self::Mark => ffi::SPIEL_PROVIDER_EVENT_TYPE_MARK,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::SpielProviderEventType> for EventType {
    #[inline]
unsafe fn from_glib(value: ffi::SpielProviderEventType) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::SPIEL_PROVIDER_EVENT_TYPE_NONE => Self::None,
            ffi::SPIEL_PROVIDER_EVENT_TYPE_WORD => Self::Word,
            ffi::SPIEL_PROVIDER_EVENT_TYPE_SENTENCE => Self::Sentence,
            ffi::SPIEL_PROVIDER_EVENT_TYPE_RANGE => Self::Range,
            ffi::SPIEL_PROVIDER_EVENT_TYPE_MARK => Self::Mark,
            value => Self::__Unknown(value),
}
}
}

