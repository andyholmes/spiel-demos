// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../../spiel/build/libspielprovider
// DO NOT EDIT

use glib::{bitflags::bitflags,prelude::*,translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "SpielProviderVoiceFeature")]
    pub struct VoiceFeature: u32 {
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_NONE")]
        const NONE = ffi::SPIEL_PROVIDER_VOICE_FEATURE_NONE as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_WORD")]
        const EVENTS_WORD = ffi::SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_WORD as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SENTENCE")]
        const EVENTS_SENTENCE = ffi::SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SENTENCE as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_RANGE")]
        const EVENTS_RANGE = ffi::SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_RANGE as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SSML_MARK")]
        const EVENTS_SSML_MARK = ffi::SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SSML_MARK as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_DATE")]
        const SSML_SAY_AS_DATE = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_DATE as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TIME")]
        const SSML_SAY_AS_TIME = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TIME as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TELEPHONE")]
        const SSML_SAY_AS_TELEPHONE = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TELEPHONE as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS")]
        const SSML_SAY_AS_CHARACTERS = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS_GLYPHS")]
        const SSML_SAY_AS_CHARACTERS_GLYPHS = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS_GLYPHS as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CARDINAL")]
        const SSML_SAY_AS_CARDINAL = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CARDINAL as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_ORDINAL")]
        const SSML_SAY_AS_ORDINAL = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_ORDINAL as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CURRENCY")]
        const SSML_SAY_AS_CURRENCY = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CURRENCY as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_BREAK")]
        const SSML_BREAK = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_BREAK as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SUB")]
        const SSML_SUB = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SUB as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_PHONEME")]
        const SSML_PHONEME = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_PHONEME as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_EMPHASIS")]
        const SSML_EMPHASIS = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_EMPHASIS as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_PROSODY")]
        const SSML_PROSODY = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_PROSODY as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_SENTENCE_PARAGRAPH")]
        const SSML_SENTENCE_PARAGRAPH = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_SENTENCE_PARAGRAPH as _;
        #[doc(alias = "SPIEL_PROVIDER_VOICE_FEATURE_SSML_TOKEN")]
        const SSML_TOKEN = ffi::SPIEL_PROVIDER_VOICE_FEATURE_SSML_TOKEN as _;
    }
}

#[doc(hidden)]
impl IntoGlib for VoiceFeature {
    type GlibType = ffi::SpielProviderVoiceFeature;

    #[inline]
    fn into_glib(self) -> ffi::SpielProviderVoiceFeature {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::SpielProviderVoiceFeature> for VoiceFeature {
    #[inline]
    unsafe fn from_glib(value: ffi::SpielProviderVoiceFeature) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for VoiceFeature {
                #[inline]
    #[doc(alias = "spiel_provider_voice_feature_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::spiel_provider_voice_feature_get_type()) }
                }
            }

impl glib::HasParamSpec for VoiceFeature {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

impl glib::value::ValueType for VoiceFeature {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for VoiceFeature {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for VoiceFeature {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<VoiceFeature> for glib::Value {
    #[inline]
    fn from(v: VoiceFeature) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

