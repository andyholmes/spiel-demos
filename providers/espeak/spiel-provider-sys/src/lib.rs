// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../../../spiel/build/libspielprovider
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type SpielProviderChunkType = c_int;
pub const SPIEL_PROVIDER_CHUNK_TYPE_NONE: SpielProviderChunkType = 0;
pub const SPIEL_PROVIDER_CHUNK_TYPE_AUDIO: SpielProviderChunkType = 1;
pub const SPIEL_PROVIDER_CHUNK_TYPE_EVENT: SpielProviderChunkType = 2;

pub type SpielProviderEventType = c_int;
pub const SPIEL_PROVIDER_EVENT_TYPE_NONE: SpielProviderEventType = 0;
pub const SPIEL_PROVIDER_EVENT_TYPE_WORD: SpielProviderEventType = 1;
pub const SPIEL_PROVIDER_EVENT_TYPE_SENTENCE: SpielProviderEventType = 2;
pub const SPIEL_PROVIDER_EVENT_TYPE_RANGE: SpielProviderEventType = 3;
pub const SPIEL_PROVIDER_EVENT_TYPE_MARK: SpielProviderEventType = 4;

// Constants
pub const SPIEL_PROVIDER_STREAM_PROTOCOL_VERSION: &[u8] = b"0.01\0";

// Flags
pub type SpielProviderVoiceFeature = c_uint;
pub const SPIEL_PROVIDER_VOICE_FEATURE_NONE: SpielProviderVoiceFeature = 0;
pub const SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_WORD: SpielProviderVoiceFeature = 1;
pub const SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SENTENCE: SpielProviderVoiceFeature = 2;
pub const SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_RANGE: SpielProviderVoiceFeature = 4;
pub const SPIEL_PROVIDER_VOICE_FEATURE_EVENTS_SSML_MARK: SpielProviderVoiceFeature = 8;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_DATE: SpielProviderVoiceFeature = 16;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TIME: SpielProviderVoiceFeature = 32;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_TELEPHONE: SpielProviderVoiceFeature = 64;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS: SpielProviderVoiceFeature = 128;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CHARACTERS_GLYPHS: SpielProviderVoiceFeature = 256;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CARDINAL: SpielProviderVoiceFeature = 512;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_ORDINAL: SpielProviderVoiceFeature = 1024;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SAY_AS_CURRENCY: SpielProviderVoiceFeature = 2048;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_BREAK: SpielProviderVoiceFeature = 4096;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SUB: SpielProviderVoiceFeature = 8192;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_PHONEME: SpielProviderVoiceFeature = 16384;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_EMPHASIS: SpielProviderVoiceFeature = 32768;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_PROSODY: SpielProviderVoiceFeature = 65536;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_SENTENCE_PARAGRAPH: SpielProviderVoiceFeature = 131072;
pub const SPIEL_PROVIDER_VOICE_FEATURE_SSML_TOKEN: SpielProviderVoiceFeature = 262144;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpielProviderEventData {
    pub event_type: u8,
    pub range_start: u32,
    pub range_end: u32,
    pub mark_name_length: u32,
}

impl ::std::fmt::Debug for SpielProviderEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderEventData @ {self:p}"))
         .field("event_type", &self.event_type)
         .field("range_start", &self.range_start)
         .field("range_end", &self.range_end)
         .field("mark_name_length", &self.mark_name_length)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpielProviderStreamHeader {
    pub version: [c_char; 4],
}

impl ::std::fmt::Debug for SpielProviderStreamHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderStreamHeader @ {self:p}"))
         .field("version", &self.version)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpielProviderStreamReaderClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for SpielProviderStreamReaderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderStreamReaderClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpielProviderStreamWriterClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for SpielProviderStreamWriterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderStreamWriterClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct SpielProviderStreamReader {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for SpielProviderStreamReader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderStreamReader @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct SpielProviderStreamWriter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for SpielProviderStreamWriter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("SpielProviderStreamWriter @ {self:p}"))
         .finish()
    }
}

#[link(name = "spiel-provider-0.1")]
extern "C" {

    //=========================================================================
    // SpielProviderVoiceFeature
    //=========================================================================
    pub fn spiel_provider_voice_feature_get_type() -> GType;

    //=========================================================================
    // SpielProviderStreamReader
    //=========================================================================
    pub fn spiel_provider_stream_reader_get_type() -> GType;
    pub fn spiel_provider_stream_reader_new(fd: c_int) -> *mut SpielProviderStreamReader;
    pub fn spiel_provider_stream_reader_close(self_: *mut SpielProviderStreamReader);
    pub fn spiel_provider_stream_reader_get_audio(self_: *mut SpielProviderStreamReader, chunk: *mut *mut u8, chunk_size: *mut u32) -> gboolean;
    pub fn spiel_provider_stream_reader_get_event(self_: *mut SpielProviderStreamReader, event_type: *mut SpielProviderEventType, range_start: *mut u32, range_end: *mut u32, mark_name: *mut *mut c_char) -> gboolean;
    pub fn spiel_provider_stream_reader_get_stream_header(self_: *mut SpielProviderStreamReader) -> gboolean;

    //=========================================================================
    // SpielProviderStreamWriter
    //=========================================================================
    pub fn spiel_provider_stream_writer_get_type() -> GType;
    pub fn spiel_provider_stream_writer_new(fd: c_int) -> *mut SpielProviderStreamWriter;
    pub fn spiel_provider_stream_writer_close(self_: *mut SpielProviderStreamWriter);
    pub fn spiel_provider_stream_writer_send_audio(self_: *mut SpielProviderStreamWriter, chunk: *mut u8, chunk_size: u32);
    pub fn spiel_provider_stream_writer_send_event(self_: *mut SpielProviderStreamWriter, event_type: SpielProviderEventType, range_start: u32, range_end: u32, mark_name: *const c_char);
    pub fn spiel_provider_stream_writer_send_stream_header(self_: *mut SpielProviderStreamWriter);

}
